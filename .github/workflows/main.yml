name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read  # 읽기 권한 설정

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3


      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set target IP based on running Docker container
        run: |
          # 현재 실행 중인 컨테이너 확인
          EXIST_BLUE=$(docker ps --filter "name=react_blue" --format "{{.Names}}")

          # 실행 여부에 따라 CURRENT_UPSTREAM 결정
          if [ -z "$EXIST_BLUE" ]; then
            echo "react_blue is NOT running -> Setting CURRENT_UPSTREAM to react_blue"
            CURRENT_UPSTREAM=react_blue
          else
            echo "react_blue is running -> Setting CURRENT_UPSTREAM to react_green"
            CURRENT_UPSTREAM=react_green
          fi

          # GitHub 환경 변수 설정
          echo CURRENT_UPSTREAM=$CURRENT_UPSTREAM >> $GITHUB_ENV

          if [ "$CURRENT_UPSTREAM" = "react_blue" ]; then
            echo "CURRENT_PORT=3000" >> $GITHUB_ENV
            echo "STOPPED_PORT=3001" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=react_green" >> $GITHUB_ENV
          elif [ "$CURRENT_UPSTREAM" = "react_green" ]; then
            echo "CURRENT_PORT=3001" >> $GITHUB_ENV
            echo "STOPPED_PORT=3000" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=react_blue" >> $GITHUB_ENV
          else
            echo "error"
            exit 1
          fi

      - name: Build Docker
        run: docker build --platform linux/amd64 -t ${{ secrets.DOCKERHUB_USERNAME }}/react_docker .

      - name: Push Docker
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/react_docker:latest

      - name: Docker compose
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.REACT_DOCKER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/react_docker:latest
            sudo docker-compose -f docker-compose-${{ env.TARGET_UPSTREAM }}.yml up -d
  
      - name: Debug Docker Containers
        run: |
          echo "🔍 Listing all running containers..."
          docker ps --format "table {{.ID}}\t{{.Names}}\t{{.Status}}"

      - name: Check running containers on remote server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.REACT_DOCKER_IP }} "docker ps --format 'table {{.ID}}\t{{.Names}}\t{{.Status}}'"

      - name: Check if the TARGET_UPSTREAM container is running
        run: |
          ATTEMPT=0
          MAX_ATTEMPTS=3
          RETRY_DELAY=10  # 10초 대기
  
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            echo "Attempt $((ATTEMPT+1)) - Checking if container '${{ env.TARGET_UPSTREAM }}' is running..."
            
            # 실행 중인 컨테이너 확인 (grep 사용)
            if docker ps --format "{{.Names}}" | grep -q "^${{ env.TARGET_UPSTREAM }}$"; then
              echo "✅ Success: Container '${{ env.TARGET_UPSTREAM }}' is running!"
              exit 0
            fi
            
            echo "⚠️ Container '${{ env.TARGET_UPSTREAM }}' is NOT running. Retrying in $RETRY_DELAY seconds..."
            sleep $RETRY_DELAY
            ATTEMPT=$((ATTEMPT+1))
          done
  
          echo "❌ Error: Container '${{ env.TARGET_UPSTREAM }}' is still NOT running after $MAX_ATTEMPTS attempts!"
          exit 1


      - name: Change nginx upstream
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.REACT_DOCKER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker exec -i nginxserver bash -c 'echo "set \$react_service_url ${{ env.TARGET_UPSTREAM }};" > /etc/nginx/conf.d/react_service-env.inc && nginx -s reload'

      - name: Stop current server
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.REACT_DOCKER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            if sudo docker ps -a --format '{{.Names}}' | grep -q "^${{ env.CURRENT_UPSTREAM }}$"; then
              sudo docker stop ${{ env.CURRENT_UPSTREAM }}
              sudo docker rm ${{ env.CURRENT_UPSTREAM }}
            fi

name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read  # 읽기 권한 설정

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'
  
      - name: Install dependencies for Puppeteer
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libx11-dev \
            libgdk-pixbuf2.0-0 \
            libnss3 \
            fonts-liberation \
            libappindicator3-1 \
            libxss1 \
            libasound2
          npm install puppeteer

      - name: Fetch HTML and Extract Status
        run: |
          # Puppeteer 스크립트 작성
          echo "
          const puppeteer = require('puppeteer');
  
          (async () => {
            const browser = await puppeteer.launch({ headless: true });
            const page = await browser.newPage();
            await page.goto('http://${{ secrets.REACT_DOCKER_IP }}/healthcheck/env', { waitUntil: 'domcontentloaded' });
  
            // 'div.env' 안의 텍스트 추출
            const status = await page.$eval('.env', element => element.innerText);
            console.log('Extracted status:', status);
  
            // 상태에 따라 환경 설정
            let currentUpstream;
            let currentPort;
            let stoppedPort;
            let targetUpstream;
            if (status === 'blue') {
              currentUpstream = 'react_blue';
              currentPort = '3000';
              stoppedPort = '3001';
              targetUpstream = 'react_green';
            } else if (status === 'green') {
              currentUpstream = 'react_green';
              currentPort = '3001';
              stoppedPort = '3000';
              targetUpstream = 'react_blue';
            } else {
              console.error('Error: Unexpected status');
              process.exit(1);
            }
  
            // GitHub Actions 환경 변수로 설정
            console.log('CURRENT_UPSTREAM:', currentUpstream);
            console.log('CURRENT_PORT:', currentPort);
            console.log('STOPPED_PORT:', stoppedPort);
            console.log('TARGET_UPSTREAM:', targetUpstream);
  
            // GitHub Actions에 환경 변수를 설정하는 방식
            console.log(`CURRENT_UPSTREAM=${currentUpstream}`);
            console.log(`CURRENT_PORT=${currentPort}`);
            console.log(`STOPPED_PORT=${stoppedPort}`);
            console.log(`TARGET_UPSTREAM=${targetUpstream}`);
  
            // 환경 변수 GitHub Actions로 전달
            process.stdout.write(`CURRENT_UPSTREAM=${currentUpstream}\n`);
            process.stdout.write(`CURRENT_PORT=${currentPort}\n`);
            process.stdout.write(`STOPPED_PORT=${stoppedPort}\n`);
            process.stdout.write(`TARGET_UPSTREAM=${targetUpstream}\n`);
  
            await browser.close();
          })();
          " > puppeteer-script.js
  
          # Puppeteer 스크립트 실행
          node puppeteer-script.js
      
      # - name: Set target IP # 커맨드 이름
      #   run: |
      #     STATUS=$(curl -o /dev/null -w "%{http_code}" "http://${{ secrets.REACT_DOCKER_IP }}/healthcheck/react_blue")
      #     echo $STATUS
      #     if [ $STATUS = 404 ]; then
      #       CURRENT_UPSTREAM=react_blue
      #     else
      #       CURRENT_UPSTREAM=react_green
      #     fi
      #     echo CURRENT_UPSTREAM=$CURRENT_UPSTREAM >> $GITHUB_ENV
      #     if [ $CURRENT_UPSTREAM = react_blue ]; then
      #       echo "CURRENT_PORT=3000" >> $GITHUB_ENV
      #       echo "STOPPED_PORT=3001" >> $GITHUB_ENV
      #       echo "TARGET_UPSTREAM=react_green" >> $GITHUB_ENV
      #     elif [ $CURRENT_UPSTREAM = react_green ]; then
      #       echo "CURRENT_PORT=3001" >> $GITHUB_ENV
      #       echo "STOPPED_PORT=3000" >> $GITHUB_ENV
      #       echo "TARGET_UPSTREAM=react_blue" >> $GITHUB_ENV
      #     else
      #       echo "error"
      #       exit 1
      #     fi
          
      # - name: Get the health_check value from the HTML
      #   run: |
      #     HTML=$(curl -s "http://${{ secrets.REACT_DOCKER_IP }}/healthcheck/env")
      
      #     # HTML 내용 디버깅
      #     echo "Fetched HTML: $HTML"
      
      #     # 'blue' 값 추출하기 (멀티라인 대응)
      #     STATUS=$(echo "$HTML" | tr -d '\n' | sed -n 's/.*<div class="env">\s*\([^<]*\)\s*<\/div>.*/\1/p')
      
      #     echo "Extracted status: $STATUS"
      
      #     # 값이 비어있는 경우 오류 처리
      #     if [ -z "$STATUS" ]; then
      #       echo "Error: STATUS is empty"
      #       exit 1
      #     fi
      
      #     # 'blue'에 따라서 조건 처리
      #     if [ "$STATUS" = "blue" ]; then
      #       echo "CURRENT_UPSTREAM=react_blue" >> $GITHUB_ENV
      #     else
      #       echo "CURRENT_UPSTREAM=react_green" >> $GITHUB_ENV
      #     fi
      
      #     if [ "$CURRENT_UPSTREAM" = "react_blue" ]; then
      #       echo "CURRENT_PORT=3000" >> $GITHUB_ENV  
      #       echo "STOPPED_PORT=3001" >> $GITHUB_ENV
      #       echo "TARGET_UPSTREAM=react_green" >> $GITHUB_ENV
      #     elif [ "$CURRENT_UPSTREAM" = "react_green" ]; then
      #       echo "CURRENT_PORT=3001" >> $GITHUB_ENV
      #       echo "STOPPED_PORT=3000" >> $GITHUB_ENV
      #       echo "TARGET_UPSTREAM=react_blue" >> $GITHUB_ENV
      #     else
      #       echo "Error: Invalid CURRENT_UPSTREAM"
      #       exit 1
      #     fi


      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker
        run: docker build --platform linux/amd64 -t ${{ secrets.DOCKERHUB_USERNAME }}/react_docker .

      - name: Push Docker
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/react_docker:latest

      - name: Docker compose
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.REACT_DOCKER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/react_docker:latest
            sudo docker-compose -f docker-compose-${{ env.TARGET_UPSTREAM }}.yml up -d

      - name: Check deploy server URL with dynamic target
        id: healthcheck
        continue-on-error: true  # 오류가 발생해도 GitHub Actions가 중단되지 않도록 설정
        uses: jtalk/url-health-check-action@v3
        with:
          url: http://${{ secrets.REACT_DOCKER_IP }}/healthcheck/${{ env.TARGET_UPSTREAM }}
          max-attempts: 3
          retry-delay: 10s

      - name: Validate health check result
        run: |
          if [[ "${{ steps.healthcheck.outcome }}" == "failure" ]]; then
            RESPONSE_CODE=$(curl -o /dev/null -s -w "%{http_code}\n" http://${{ secrets.REACT_DOCKER_IP }}/healthcheck/${{ env.TARGET_UPSTREAM }})
            echo "Response Code: $RESPONSE_CODE"
            if [[ "$RESPONSE_CODE" == "404" ]]; then
              echo "✅ 404 received, proceeding..."
            else
              echo "❌ Healthcheck failed with status $RESPONSE_CODE"
              exit 1
            fi
          fi
      # - name: Check if the status matches TARGET_UPSTREAM
      #   id: status_check
      #   run: |
      #     TARGET=${{ env.TARGET_UPSTREAM }}
      #     attempt=0
      #     STATUS=""

      #     while [ "$attempt" -lt 3 ]; do
      #       # HTML 내용 가져오기
      #       HTML=$(curl -s "http://${{ secrets.REACT_DOCKER_IP }}/healthcheck/env")
            
      #       # 'blue' 값 추출하기
      #       STATUS=$(echo "$HTML" | grep -oP '(?<=<div class="env">).*?(?=</div>)')
            
      #       # 결과 출력
      #       echo "Extracted status: $STATUS"
            
      #       if [ "$STATUS" = "$TARGET" ]; then
      #         echo "STATUS matches TARGET_UPSTREAM: $STATUS"
      #         exit 0
      #       fi
            
      #       attempt=$((attempt + 1))
      #       echo "Attempt $attempt failed. Retrying in 10 seconds..."
      #       sleep 10
      #     done

      #     echo "STATUS does not match TARGET_UPSTREAM after 3 attempts."
      #     exit 1

      - name: Change nginx upstream
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.REACT_DOCKER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker exec -i nginxserver bash -c 'echo "set \$react_service_url ${{ env.TARGET_UPSTREAM }};" > /etc/nginx/conf.d/react_service-env.inc && nginx -s reload'

      - name: Stop current server
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.REACT_DOCKER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            if sudo docker ps -a --format '{{.Names}}' | grep -q "^${{ env.CURRENT_UPSTREAM }}$"; then
              sudo docker stop ${{ env.CURRENT_UPSTREAM }}
              sudo docker rm ${{ env.CURRENT_UPSTREAM }}
            fi

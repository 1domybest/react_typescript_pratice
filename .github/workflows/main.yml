name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read  # 읽기 권한 설정

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Get the health_check value from the HTML
        run: |
          # HTML 내용 가져오기
          HTML=$(curl -s "http://${{ secrets.REACT_DOCKER_IP }}/healthcheck/env")
      
          # 'blue' 값 추출하기 (class="env"> 뒤의 값 가져오기)
          STATUS=$(echo "$HTML" | sed -n 's/.*<div class="env">\([^<]*\)<\/div>.*/\1/p')
      
          # 결과 출력
          echo "Extracted status: $STATUS"
      
          # 값이 비어있는 경우 오류 처리
          if [ -z "$STATUS" ]; then
            echo "Error: STATUS is empty"
            exit 1
          fi
      
          # 'blue'에 따라서 조건 처리
          if [ "$STATUS" = "blue" ]; then
            echo "CURRENT_UPSTREAM=react_blue" >> $GITHUB_ENV
          else
            echo "CURRENT_UPSTREAM=react_green" >> $GITHUB_ENV
          fi
      
          if [ "$CURRENT_UPSTREAM" = "react_blue" ]; then
            echo "CURRENT_PORT=3000" >> $GITHUB_ENV  
            echo "STOPPED_PORT=3001" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=react_green" >> $GITHUB_ENV
          elif [ "$CURRENT_UPSTREAM" = "react_green" ]; then
            echo "CURRENT_PORT=3001" >> $GITHUB_ENV
            echo "STOPPED_PORT=3000" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=react_blue" >> $GITHUB_ENV
          else
            echo "Error: Invalid CURRENT_UPSTREAM"
            exit 1
          fi


      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker
        run: docker build --platform linux/amd64 -t ${{ secrets.DOCKERHUB_USERNAME }}/react_docker .

      - name: Push Docker
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/react_docker:latest

      - name: Docker compose
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.REACT_DOCKER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/react_docker:latest
            sudo docker-compose -f docker-compose-${{ env.TARGET_UPSTREAM }}.yml up -d

      - name: Check if the status matches TARGET_UPSTREAM
        id: status_check
        run: |
          TARGET=${{ env.TARGET_UPSTREAM }}
          attempt=0
          STATUS=""

          while [ "$attempt" -lt 3 ]; do
            # HTML 내용 가져오기
            HTML=$(curl -s "http://${{ secrets.REACT_DOCKER_IP }}/healthcheck/env")
            
            # 'blue' 값 추출하기
            STATUS=$(echo "$HTML" | grep -oP '(?<=<div class="env">).*?(?=</div>)')
            
            # 결과 출력
            echo "Extracted status: $STATUS"
            
            if [ "$STATUS" = "$TARGET" ]; then
              echo "STATUS matches TARGET_UPSTREAM: $STATUS"
              exit 0
            fi
            
            attempt=$((attempt + 1))
            echo "Attempt $attempt failed. Retrying in 10 seconds..."
            sleep 10
          done

          echo "STATUS does not match TARGET_UPSTREAM after 3 attempts."
          exit 1

      - name: Change nginx upstream
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.REACT_DOCKER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker exec -i nginxserver bash -c 'echo "set \$react_service_url ${{ env.TARGET_UPSTREAM }};" > /etc/nginx/conf.d/react_service-env.inc && nginx -s reload'

      - name: Stop current server
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.REACT_DOCKER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker stop ${{ env.CURRENT_UPSTREAM }}
            sudo docker rm ${{ env.CURRENT_UPSTREAM }}
